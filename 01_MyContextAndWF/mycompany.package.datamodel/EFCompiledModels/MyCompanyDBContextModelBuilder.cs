// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Migrations;

#pragma warning disable 219, 612, 618
#nullable disable

namespace mycompany.package.datamodel
{
    public partial class MyCompanyDBContextModel
    {
        partial void Initialize()
        {
            var inOrder = InOrderEntityType.Create(this);
            var inOrderPos = InOrderPosEntityType.Create(this);
            var material = MaterialEntityType.Create(this);

            InOrderPosEntityType.CreateForeignKey1(inOrderPos, inOrder);
            InOrderPosEntityType.CreateForeignKey2(inOrderPos, material);

            InOrderEntityType.CreateAnnotations(inOrder);
            InOrderPosEntityType.CreateAnnotations(inOrderPos);
            MaterialEntityType.CreateAnnotations(material);

            AddAnnotation("ProductVersion", "8.0.10");
            AddAnnotation("Relational:MaxIdentifierLength", 128);
            AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
            AddRuntimeAnnotation("Relational:RelationalModel", CreateRelationalModel());
        }

        private IRelationalModel CreateRelationalModel()
        {
            var relationalModel = new RelationalModel(this);

            var inOrder = FindEntityType("mycompany.package.datamodel.InOrder")!;

            var defaultTableMappings = new List<TableMappingBase<ColumnMappingBase>>();
            inOrder.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings);
            var mycompanypackagedatamodelInOrderTableBase = new TableBase("mycompany.package.datamodel.InOrder", null, relationalModel);
            var commentColumnBase = new ColumnBase<ColumnMappingBase>("Comment", "varchar(max)", mycompanypackagedatamodelInOrderTableBase)
            {
                IsNullable = true
            };
            mycompanypackagedatamodelInOrderTableBase.Columns.Add("Comment", commentColumnBase);
            var inOrderDateColumnBase = new ColumnBase<ColumnMappingBase>("InOrderDate", "datetime", mycompanypackagedatamodelInOrderTableBase);
            mycompanypackagedatamodelInOrderTableBase.Columns.Add("InOrderDate", inOrderDateColumnBase);
            var inOrderIDColumnBase = new ColumnBase<ColumnMappingBase>("InOrderID", "uniqueidentifier", mycompanypackagedatamodelInOrderTableBase);
            mycompanypackagedatamodelInOrderTableBase.Columns.Add("InOrderID", inOrderIDColumnBase);
            var inOrderNoColumnBase = new ColumnBase<ColumnMappingBase>("InOrderNo", "varchar(20)", mycompanypackagedatamodelInOrderTableBase);
            mycompanypackagedatamodelInOrderTableBase.Columns.Add("InOrderNo", inOrderNoColumnBase);
            var insertDateColumnBase = new ColumnBase<ColumnMappingBase>("InsertDate", "datetime", mycompanypackagedatamodelInOrderTableBase);
            mycompanypackagedatamodelInOrderTableBase.Columns.Add("InsertDate", insertDateColumnBase);
            var insertNameColumnBase = new ColumnBase<ColumnMappingBase>("InsertName", "varchar(5)", mycompanypackagedatamodelInOrderTableBase);
            mycompanypackagedatamodelInOrderTableBase.Columns.Add("InsertName", insertNameColumnBase);
            var updateDateColumnBase = new ColumnBase<ColumnMappingBase>("UpdateDate", "datetime", mycompanypackagedatamodelInOrderTableBase);
            mycompanypackagedatamodelInOrderTableBase.Columns.Add("UpdateDate", updateDateColumnBase);
            var updateNameColumnBase = new ColumnBase<ColumnMappingBase>("UpdateName", "varchar(5)", mycompanypackagedatamodelInOrderTableBase);
            mycompanypackagedatamodelInOrderTableBase.Columns.Add("UpdateName", updateNameColumnBase);
            var xMLConfigColumnBase = new ColumnBase<ColumnMappingBase>("XMLConfig", "text", mycompanypackagedatamodelInOrderTableBase)
            {
                IsNullable = true
            };
            mycompanypackagedatamodelInOrderTableBase.Columns.Add("XMLConfig", xMLConfigColumnBase);
            relationalModel.DefaultTables.Add("mycompany.package.datamodel.InOrder", mycompanypackagedatamodelInOrderTableBase);
            var mycompanypackagedatamodelInOrderMappingBase = new TableMappingBase<ColumnMappingBase>(inOrder, mycompanypackagedatamodelInOrderTableBase, true);
            mycompanypackagedatamodelInOrderTableBase.AddTypeMapping(mycompanypackagedatamodelInOrderMappingBase, false);
            defaultTableMappings.Add(mycompanypackagedatamodelInOrderMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)inOrderIDColumnBase, inOrder.FindProperty("InOrderID")!, mycompanypackagedatamodelInOrderMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)commentColumnBase, inOrder.FindProperty("Comment")!, mycompanypackagedatamodelInOrderMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)inOrderDateColumnBase, inOrder.FindProperty("InOrderDate")!, mycompanypackagedatamodelInOrderMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)inOrderNoColumnBase, inOrder.FindProperty("InOrderNo")!, mycompanypackagedatamodelInOrderMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)insertDateColumnBase, inOrder.FindProperty("InsertDate")!, mycompanypackagedatamodelInOrderMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)insertNameColumnBase, inOrder.FindProperty("InsertName")!, mycompanypackagedatamodelInOrderMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)updateDateColumnBase, inOrder.FindProperty("UpdateDate")!, mycompanypackagedatamodelInOrderMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)updateNameColumnBase, inOrder.FindProperty("UpdateName")!, mycompanypackagedatamodelInOrderMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)xMLConfigColumnBase, inOrder.FindProperty("XMLConfig")!, mycompanypackagedatamodelInOrderMappingBase);

            var tableMappings = new List<TableMapping>();
            inOrder.SetRuntimeAnnotation("Relational:TableMappings", tableMappings);
            var inOrderTable = new Table("InOrder", null, relationalModel);
            var inOrderIDColumn = new Column("InOrderID", "uniqueidentifier", inOrderTable);
            inOrderTable.Columns.Add("InOrderID", inOrderIDColumn);
            var commentColumn = new Column("Comment", "varchar(max)", inOrderTable)
            {
                IsNullable = true
            };
            inOrderTable.Columns.Add("Comment", commentColumn);
            var inOrderDateColumn = new Column("InOrderDate", "datetime", inOrderTable);
            inOrderTable.Columns.Add("InOrderDate", inOrderDateColumn);
            var inOrderNoColumn = new Column("InOrderNo", "varchar(20)", inOrderTable);
            inOrderTable.Columns.Add("InOrderNo", inOrderNoColumn);
            var insertDateColumn = new Column("InsertDate", "datetime", inOrderTable);
            inOrderTable.Columns.Add("InsertDate", insertDateColumn);
            var insertNameColumn = new Column("InsertName", "varchar(5)", inOrderTable);
            inOrderTable.Columns.Add("InsertName", insertNameColumn);
            var updateDateColumn = new Column("UpdateDate", "datetime", inOrderTable);
            inOrderTable.Columns.Add("UpdateDate", updateDateColumn);
            var updateNameColumn = new Column("UpdateName", "varchar(5)", inOrderTable);
            inOrderTable.Columns.Add("UpdateName", updateNameColumn);
            var xMLConfigColumn = new Column("XMLConfig", "text", inOrderTable)
            {
                IsNullable = true
            };
            inOrderTable.Columns.Add("XMLConfig", xMLConfigColumn);
            var pK_InOrder = new UniqueConstraint("PK_InOrder", inOrderTable, new[] { inOrderIDColumn });
            inOrderTable.PrimaryKey = pK_InOrder;
            var pK_InOrderUc = RelationalModel.GetKey(this,
                "mycompany.package.datamodel.InOrder",
                new[] { "InOrderID" });
            pK_InOrder.MappedKeys.Add(pK_InOrderUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_InOrderUc).Add(pK_InOrder);
            inOrderTable.UniqueConstraints.Add("PK_InOrder", pK_InOrder);
            relationalModel.Tables.Add(("InOrder", null), inOrderTable);
            var inOrderTableMapping = new TableMapping(inOrder, inOrderTable, true);
            inOrderTable.AddTypeMapping(inOrderTableMapping, false);
            tableMappings.Add(inOrderTableMapping);
            RelationalModel.CreateColumnMapping(inOrderIDColumn, inOrder.FindProperty("InOrderID")!, inOrderTableMapping);
            RelationalModel.CreateColumnMapping(commentColumn, inOrder.FindProperty("Comment")!, inOrderTableMapping);
            RelationalModel.CreateColumnMapping(inOrderDateColumn, inOrder.FindProperty("InOrderDate")!, inOrderTableMapping);
            RelationalModel.CreateColumnMapping(inOrderNoColumn, inOrder.FindProperty("InOrderNo")!, inOrderTableMapping);
            RelationalModel.CreateColumnMapping(insertDateColumn, inOrder.FindProperty("InsertDate")!, inOrderTableMapping);
            RelationalModel.CreateColumnMapping(insertNameColumn, inOrder.FindProperty("InsertName")!, inOrderTableMapping);
            RelationalModel.CreateColumnMapping(updateDateColumn, inOrder.FindProperty("UpdateDate")!, inOrderTableMapping);
            RelationalModel.CreateColumnMapping(updateNameColumn, inOrder.FindProperty("UpdateName")!, inOrderTableMapping);
            RelationalModel.CreateColumnMapping(xMLConfigColumn, inOrder.FindProperty("XMLConfig")!, inOrderTableMapping);

            var inOrderPos = FindEntityType("mycompany.package.datamodel.InOrderPos")!;

            var defaultTableMappings0 = new List<TableMappingBase<ColumnMappingBase>>();
            inOrderPos.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings0);
            var mycompanypackagedatamodelInOrderPosTableBase = new TableBase("mycompany.package.datamodel.InOrderPos", null, relationalModel);
            var inOrderIDColumnBase0 = new ColumnBase<ColumnMappingBase>("InOrderID", "uniqueidentifier", mycompanypackagedatamodelInOrderPosTableBase);
            mycompanypackagedatamodelInOrderPosTableBase.Columns.Add("InOrderID", inOrderIDColumnBase0);
            var inOrderPosIDColumnBase = new ColumnBase<ColumnMappingBase>("InOrderPosID", "uniqueidentifier", mycompanypackagedatamodelInOrderPosTableBase);
            mycompanypackagedatamodelInOrderPosTableBase.Columns.Add("InOrderPosID", inOrderPosIDColumnBase);
            var insertDateColumnBase0 = new ColumnBase<ColumnMappingBase>("InsertDate", "datetime", mycompanypackagedatamodelInOrderPosTableBase);
            mycompanypackagedatamodelInOrderPosTableBase.Columns.Add("InsertDate", insertDateColumnBase0);
            var insertNameColumnBase0 = new ColumnBase<ColumnMappingBase>("InsertName", "varchar(5)", mycompanypackagedatamodelInOrderPosTableBase);
            mycompanypackagedatamodelInOrderPosTableBase.Columns.Add("InsertName", insertNameColumnBase0);
            var materialIDColumnBase = new ColumnBase<ColumnMappingBase>("MaterialID", "uniqueidentifier", mycompanypackagedatamodelInOrderPosTableBase);
            mycompanypackagedatamodelInOrderPosTableBase.Columns.Add("MaterialID", materialIDColumnBase);
            var sequenceColumnBase = new ColumnBase<ColumnMappingBase>("Sequence", "int", mycompanypackagedatamodelInOrderPosTableBase);
            mycompanypackagedatamodelInOrderPosTableBase.Columns.Add("Sequence", sequenceColumnBase);
            var targetQuantityColumnBase = new ColumnBase<ColumnMappingBase>("TargetQuantity", "float", mycompanypackagedatamodelInOrderPosTableBase);
            mycompanypackagedatamodelInOrderPosTableBase.Columns.Add("TargetQuantity", targetQuantityColumnBase);
            var updateDateColumnBase0 = new ColumnBase<ColumnMappingBase>("UpdateDate", "datetime", mycompanypackagedatamodelInOrderPosTableBase);
            mycompanypackagedatamodelInOrderPosTableBase.Columns.Add("UpdateDate", updateDateColumnBase0);
            var updateNameColumnBase0 = new ColumnBase<ColumnMappingBase>("UpdateName", "varchar(5)", mycompanypackagedatamodelInOrderPosTableBase);
            mycompanypackagedatamodelInOrderPosTableBase.Columns.Add("UpdateName", updateNameColumnBase0);
            var xMLConfigColumnBase0 = new ColumnBase<ColumnMappingBase>("XMLConfig", "text", mycompanypackagedatamodelInOrderPosTableBase)
            {
                IsNullable = true
            };
            mycompanypackagedatamodelInOrderPosTableBase.Columns.Add("XMLConfig", xMLConfigColumnBase0);
            relationalModel.DefaultTables.Add("mycompany.package.datamodel.InOrderPos", mycompanypackagedatamodelInOrderPosTableBase);
            var mycompanypackagedatamodelInOrderPosMappingBase = new TableMappingBase<ColumnMappingBase>(inOrderPos, mycompanypackagedatamodelInOrderPosTableBase, true);
            mycompanypackagedatamodelInOrderPosTableBase.AddTypeMapping(mycompanypackagedatamodelInOrderPosMappingBase, false);
            defaultTableMappings0.Add(mycompanypackagedatamodelInOrderPosMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)inOrderPosIDColumnBase, inOrderPos.FindProperty("InOrderPosID")!, mycompanypackagedatamodelInOrderPosMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)inOrderIDColumnBase0, inOrderPos.FindProperty("InOrderID")!, mycompanypackagedatamodelInOrderPosMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)insertDateColumnBase0, inOrderPos.FindProperty("InsertDate")!, mycompanypackagedatamodelInOrderPosMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)insertNameColumnBase0, inOrderPos.FindProperty("InsertName")!, mycompanypackagedatamodelInOrderPosMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)materialIDColumnBase, inOrderPos.FindProperty("MaterialID")!, mycompanypackagedatamodelInOrderPosMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)sequenceColumnBase, inOrderPos.FindProperty("Sequence")!, mycompanypackagedatamodelInOrderPosMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)targetQuantityColumnBase, inOrderPos.FindProperty("TargetQuantity")!, mycompanypackagedatamodelInOrderPosMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)updateDateColumnBase0, inOrderPos.FindProperty("UpdateDate")!, mycompanypackagedatamodelInOrderPosMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)updateNameColumnBase0, inOrderPos.FindProperty("UpdateName")!, mycompanypackagedatamodelInOrderPosMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)xMLConfigColumnBase0, inOrderPos.FindProperty("XMLConfig")!, mycompanypackagedatamodelInOrderPosMappingBase);

            var tableMappings0 = new List<TableMapping>();
            inOrderPos.SetRuntimeAnnotation("Relational:TableMappings", tableMappings0);
            var inOrderPosTable = new Table("InOrderPos", null, relationalModel);
            var inOrderPosIDColumn = new Column("InOrderPosID", "uniqueidentifier", inOrderPosTable);
            inOrderPosTable.Columns.Add("InOrderPosID", inOrderPosIDColumn);
            var inOrderIDColumn0 = new Column("InOrderID", "uniqueidentifier", inOrderPosTable);
            inOrderPosTable.Columns.Add("InOrderID", inOrderIDColumn0);
            var insertDateColumn0 = new Column("InsertDate", "datetime", inOrderPosTable);
            inOrderPosTable.Columns.Add("InsertDate", insertDateColumn0);
            var insertNameColumn0 = new Column("InsertName", "varchar(5)", inOrderPosTable);
            inOrderPosTable.Columns.Add("InsertName", insertNameColumn0);
            var materialIDColumn = new Column("MaterialID", "uniqueidentifier", inOrderPosTable);
            inOrderPosTable.Columns.Add("MaterialID", materialIDColumn);
            var sequenceColumn = new Column("Sequence", "int", inOrderPosTable);
            inOrderPosTable.Columns.Add("Sequence", sequenceColumn);
            var targetQuantityColumn = new Column("TargetQuantity", "float", inOrderPosTable);
            inOrderPosTable.Columns.Add("TargetQuantity", targetQuantityColumn);
            var updateDateColumn0 = new Column("UpdateDate", "datetime", inOrderPosTable);
            inOrderPosTable.Columns.Add("UpdateDate", updateDateColumn0);
            var updateNameColumn0 = new Column("UpdateName", "varchar(5)", inOrderPosTable);
            inOrderPosTable.Columns.Add("UpdateName", updateNameColumn0);
            var xMLConfigColumn0 = new Column("XMLConfig", "text", inOrderPosTable)
            {
                IsNullable = true
            };
            inOrderPosTable.Columns.Add("XMLConfig", xMLConfigColumn0);
            var pK_InOrderPos = new UniqueConstraint("PK_InOrderPos", inOrderPosTable, new[] { inOrderPosIDColumn });
            inOrderPosTable.PrimaryKey = pK_InOrderPos;
            var pK_InOrderPosUc = RelationalModel.GetKey(this,
                "mycompany.package.datamodel.InOrderPos",
                new[] { "InOrderPosID" });
            pK_InOrderPos.MappedKeys.Add(pK_InOrderPosUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_InOrderPosUc).Add(pK_InOrderPos);
            inOrderPosTable.UniqueConstraints.Add("PK_InOrderPos", pK_InOrderPos);
            var iX_InOrderPos_InOrderID = new TableIndex(
            "IX_InOrderPos_InOrderID", inOrderPosTable, new[] { inOrderIDColumn0 }, false);
            var iX_InOrderPos_InOrderIDIx = RelationalModel.GetIndex(this,
                "mycompany.package.datamodel.InOrderPos",
                new[] { "InOrderID" });
            iX_InOrderPos_InOrderID.MappedIndexes.Add(iX_InOrderPos_InOrderIDIx);
            RelationalModel.GetOrCreateTableIndexes(iX_InOrderPos_InOrderIDIx).Add(iX_InOrderPos_InOrderID);
            inOrderPosTable.Indexes.Add("IX_InOrderPos_InOrderID", iX_InOrderPos_InOrderID);
            var iX_InOrderPos_MaterialID = new TableIndex(
            "IX_InOrderPos_MaterialID", inOrderPosTable, new[] { materialIDColumn }, false);
            var iX_InOrderPos_MaterialIDIx = RelationalModel.GetIndex(this,
                "mycompany.package.datamodel.InOrderPos",
                new[] { "MaterialID" });
            iX_InOrderPos_MaterialID.MappedIndexes.Add(iX_InOrderPos_MaterialIDIx);
            RelationalModel.GetOrCreateTableIndexes(iX_InOrderPos_MaterialIDIx).Add(iX_InOrderPos_MaterialID);
            inOrderPosTable.Indexes.Add("IX_InOrderPos_MaterialID", iX_InOrderPos_MaterialID);
            relationalModel.Tables.Add(("InOrderPos", null), inOrderPosTable);
            var inOrderPosTableMapping = new TableMapping(inOrderPos, inOrderPosTable, true);
            inOrderPosTable.AddTypeMapping(inOrderPosTableMapping, false);
            tableMappings0.Add(inOrderPosTableMapping);
            RelationalModel.CreateColumnMapping(inOrderPosIDColumn, inOrderPos.FindProperty("InOrderPosID")!, inOrderPosTableMapping);
            RelationalModel.CreateColumnMapping(inOrderIDColumn0, inOrderPos.FindProperty("InOrderID")!, inOrderPosTableMapping);
            RelationalModel.CreateColumnMapping(insertDateColumn0, inOrderPos.FindProperty("InsertDate")!, inOrderPosTableMapping);
            RelationalModel.CreateColumnMapping(insertNameColumn0, inOrderPos.FindProperty("InsertName")!, inOrderPosTableMapping);
            RelationalModel.CreateColumnMapping(materialIDColumn, inOrderPos.FindProperty("MaterialID")!, inOrderPosTableMapping);
            RelationalModel.CreateColumnMapping(sequenceColumn, inOrderPos.FindProperty("Sequence")!, inOrderPosTableMapping);
            RelationalModel.CreateColumnMapping(targetQuantityColumn, inOrderPos.FindProperty("TargetQuantity")!, inOrderPosTableMapping);
            RelationalModel.CreateColumnMapping(updateDateColumn0, inOrderPos.FindProperty("UpdateDate")!, inOrderPosTableMapping);
            RelationalModel.CreateColumnMapping(updateNameColumn0, inOrderPos.FindProperty("UpdateName")!, inOrderPosTableMapping);
            RelationalModel.CreateColumnMapping(xMLConfigColumn0, inOrderPos.FindProperty("XMLConfig")!, inOrderPosTableMapping);

            var material = FindEntityType("mycompany.package.datamodel.Material")!;

            var defaultTableMappings1 = new List<TableMappingBase<ColumnMappingBase>>();
            material.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings1);
            var mycompanypackagedatamodelMaterialTableBase = new TableBase("mycompany.package.datamodel.Material", null, relationalModel);
            var deleteDateColumnBase = new ColumnBase<ColumnMappingBase>("DeleteDate", "datetime", mycompanypackagedatamodelMaterialTableBase)
            {
                IsNullable = true
            };
            mycompanypackagedatamodelMaterialTableBase.Columns.Add("DeleteDate", deleteDateColumnBase);
            var deleteNameColumnBase = new ColumnBase<ColumnMappingBase>("DeleteName", "varchar(5)", mycompanypackagedatamodelMaterialTableBase)
            {
                IsNullable = true
            };
            mycompanypackagedatamodelMaterialTableBase.Columns.Add("DeleteName", deleteNameColumnBase);
            var insertDateColumnBase1 = new ColumnBase<ColumnMappingBase>("InsertDate", "datetime", mycompanypackagedatamodelMaterialTableBase);
            mycompanypackagedatamodelMaterialTableBase.Columns.Add("InsertDate", insertDateColumnBase1);
            var insertNameColumnBase1 = new ColumnBase<ColumnMappingBase>("InsertName", "varchar(5)", mycompanypackagedatamodelMaterialTableBase);
            mycompanypackagedatamodelMaterialTableBase.Columns.Add("InsertName", insertNameColumnBase1);
            var materialIDColumnBase0 = new ColumnBase<ColumnMappingBase>("MaterialID", "uniqueidentifier", mycompanypackagedatamodelMaterialTableBase);
            mycompanypackagedatamodelMaterialTableBase.Columns.Add("MaterialID", materialIDColumnBase0);
            var materialName1ColumnBase = new ColumnBase<ColumnMappingBase>("MaterialName1", "varchar(40)", mycompanypackagedatamodelMaterialTableBase);
            mycompanypackagedatamodelMaterialTableBase.Columns.Add("MaterialName1", materialName1ColumnBase);
            var materialNoColumnBase = new ColumnBase<ColumnMappingBase>("MaterialNo", "varchar(30)", mycompanypackagedatamodelMaterialTableBase);
            mycompanypackagedatamodelMaterialTableBase.Columns.Add("MaterialNo", materialNoColumnBase);
            var updateDateColumnBase1 = new ColumnBase<ColumnMappingBase>("UpdateDate", "datetime", mycompanypackagedatamodelMaterialTableBase);
            mycompanypackagedatamodelMaterialTableBase.Columns.Add("UpdateDate", updateDateColumnBase1);
            var updateNameColumnBase1 = new ColumnBase<ColumnMappingBase>("UpdateName", "varchar(5)", mycompanypackagedatamodelMaterialTableBase);
            mycompanypackagedatamodelMaterialTableBase.Columns.Add("UpdateName", updateNameColumnBase1);
            var xMLConfigColumnBase1 = new ColumnBase<ColumnMappingBase>("XMLConfig", "text", mycompanypackagedatamodelMaterialTableBase)
            {
                IsNullable = true
            };
            mycompanypackagedatamodelMaterialTableBase.Columns.Add("XMLConfig", xMLConfigColumnBase1);
            relationalModel.DefaultTables.Add("mycompany.package.datamodel.Material", mycompanypackagedatamodelMaterialTableBase);
            var mycompanypackagedatamodelMaterialMappingBase = new TableMappingBase<ColumnMappingBase>(material, mycompanypackagedatamodelMaterialTableBase, true);
            mycompanypackagedatamodelMaterialTableBase.AddTypeMapping(mycompanypackagedatamodelMaterialMappingBase, false);
            defaultTableMappings1.Add(mycompanypackagedatamodelMaterialMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)materialIDColumnBase0, material.FindProperty("MaterialID")!, mycompanypackagedatamodelMaterialMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)deleteDateColumnBase, material.FindProperty("DeleteDate")!, mycompanypackagedatamodelMaterialMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)deleteNameColumnBase, material.FindProperty("DeleteName")!, mycompanypackagedatamodelMaterialMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)insertDateColumnBase1, material.FindProperty("InsertDate")!, mycompanypackagedatamodelMaterialMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)insertNameColumnBase1, material.FindProperty("InsertName")!, mycompanypackagedatamodelMaterialMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)materialName1ColumnBase, material.FindProperty("MaterialName1")!, mycompanypackagedatamodelMaterialMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)materialNoColumnBase, material.FindProperty("MaterialNo")!, mycompanypackagedatamodelMaterialMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)updateDateColumnBase1, material.FindProperty("UpdateDate")!, mycompanypackagedatamodelMaterialMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)updateNameColumnBase1, material.FindProperty("UpdateName")!, mycompanypackagedatamodelMaterialMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)xMLConfigColumnBase1, material.FindProperty("XMLConfig")!, mycompanypackagedatamodelMaterialMappingBase);

            var tableMappings1 = new List<TableMapping>();
            material.SetRuntimeAnnotation("Relational:TableMappings", tableMappings1);
            var materialTable = new Table("Material", null, relationalModel);
            var materialIDColumn0 = new Column("MaterialID", "uniqueidentifier", materialTable);
            materialTable.Columns.Add("MaterialID", materialIDColumn0);
            var deleteDateColumn = new Column("DeleteDate", "datetime", materialTable)
            {
                IsNullable = true
            };
            materialTable.Columns.Add("DeleteDate", deleteDateColumn);
            var deleteNameColumn = new Column("DeleteName", "varchar(5)", materialTable)
            {
                IsNullable = true
            };
            materialTable.Columns.Add("DeleteName", deleteNameColumn);
            var insertDateColumn1 = new Column("InsertDate", "datetime", materialTable);
            materialTable.Columns.Add("InsertDate", insertDateColumn1);
            var insertNameColumn1 = new Column("InsertName", "varchar(5)", materialTable);
            materialTable.Columns.Add("InsertName", insertNameColumn1);
            var materialName1Column = new Column("MaterialName1", "varchar(40)", materialTable);
            materialTable.Columns.Add("MaterialName1", materialName1Column);
            var materialNoColumn = new Column("MaterialNo", "varchar(30)", materialTable);
            materialTable.Columns.Add("MaterialNo", materialNoColumn);
            var updateDateColumn1 = new Column("UpdateDate", "datetime", materialTable);
            materialTable.Columns.Add("UpdateDate", updateDateColumn1);
            var updateNameColumn1 = new Column("UpdateName", "varchar(5)", materialTable);
            materialTable.Columns.Add("UpdateName", updateNameColumn1);
            var xMLConfigColumn1 = new Column("XMLConfig", "text", materialTable)
            {
                IsNullable = true
            };
            materialTable.Columns.Add("XMLConfig", xMLConfigColumn1);
            var pK_Material = new UniqueConstraint("PK_Material", materialTable, new[] { materialIDColumn0 });
            materialTable.PrimaryKey = pK_Material;
            var pK_MaterialUc = RelationalModel.GetKey(this,
                "mycompany.package.datamodel.Material",
                new[] { "MaterialID" });
            pK_Material.MappedKeys.Add(pK_MaterialUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_MaterialUc).Add(pK_Material);
            materialTable.UniqueConstraints.Add("PK_Material", pK_Material);
            relationalModel.Tables.Add(("Material", null), materialTable);
            var materialTableMapping = new TableMapping(material, materialTable, true);
            materialTable.AddTypeMapping(materialTableMapping, false);
            tableMappings1.Add(materialTableMapping);
            RelationalModel.CreateColumnMapping(materialIDColumn0, material.FindProperty("MaterialID")!, materialTableMapping);
            RelationalModel.CreateColumnMapping(deleteDateColumn, material.FindProperty("DeleteDate")!, materialTableMapping);
            RelationalModel.CreateColumnMapping(deleteNameColumn, material.FindProperty("DeleteName")!, materialTableMapping);
            RelationalModel.CreateColumnMapping(insertDateColumn1, material.FindProperty("InsertDate")!, materialTableMapping);
            RelationalModel.CreateColumnMapping(insertNameColumn1, material.FindProperty("InsertName")!, materialTableMapping);
            RelationalModel.CreateColumnMapping(materialName1Column, material.FindProperty("MaterialName1")!, materialTableMapping);
            RelationalModel.CreateColumnMapping(materialNoColumn, material.FindProperty("MaterialNo")!, materialTableMapping);
            RelationalModel.CreateColumnMapping(updateDateColumn1, material.FindProperty("UpdateDate")!, materialTableMapping);
            RelationalModel.CreateColumnMapping(updateNameColumn1, material.FindProperty("UpdateName")!, materialTableMapping);
            RelationalModel.CreateColumnMapping(xMLConfigColumn1, material.FindProperty("XMLConfig")!, materialTableMapping);
            var fK_InOrderPos_InOrderID = new ForeignKeyConstraint(
                "FK_InOrderPos_InOrderID", inOrderPosTable, inOrderTable,
                new[] { inOrderIDColumn0 },
                inOrderTable.FindUniqueConstraint("PK_InOrder")!, ReferentialAction.Cascade);
            var fK_InOrderPos_InOrderIDFk = RelationalModel.GetForeignKey(this,
                "mycompany.package.datamodel.InOrderPos",
                new[] { "InOrderID" },
                "mycompany.package.datamodel.InOrder",
                new[] { "InOrderID" });
            fK_InOrderPos_InOrderID.MappedForeignKeys.Add(fK_InOrderPos_InOrderIDFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_InOrderPos_InOrderIDFk).Add(fK_InOrderPos_InOrderID);
            inOrderPosTable.ForeignKeyConstraints.Add(fK_InOrderPos_InOrderID);
            inOrderTable.ReferencingForeignKeyConstraints.Add(fK_InOrderPos_InOrderID);
            var fK_InOrderPos_MaterialID = new ForeignKeyConstraint(
                "FK_InOrderPos_MaterialID", inOrderPosTable, materialTable,
                new[] { materialIDColumn },
                materialTable.FindUniqueConstraint("PK_Material")!, ReferentialAction.NoAction);
            var fK_InOrderPos_MaterialIDFk = RelationalModel.GetForeignKey(this,
                "mycompany.package.datamodel.InOrderPos",
                new[] { "MaterialID" },
                "mycompany.package.datamodel.Material",
                new[] { "MaterialID" });
            fK_InOrderPos_MaterialID.MappedForeignKeys.Add(fK_InOrderPos_MaterialIDFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_InOrderPos_MaterialIDFk).Add(fK_InOrderPos_MaterialID);
            inOrderPosTable.ForeignKeyConstraints.Add(fK_InOrderPos_MaterialID);
            materialTable.ReferencingForeignKeyConstraints.Add(fK_InOrderPos_MaterialID);
            return relationalModel.MakeReadOnly();
        }
    }
}
